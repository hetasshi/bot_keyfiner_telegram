"""Text templates and formatting helpers for Telegram responses."""

from __future__ import annotations

from typing import Mapping, Optional

START_MESSAGE = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –∞—É–¥–∏–æ (mp3, wav, m4a, ogg/opus) –¥–æ 70 –ú–ë, "
    "–∏ —è –æ–ø—Ä–µ–¥–µ–ª—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, —Ç–µ–º–ø –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞."
)
FILE_TOO_LARGE_MESSAGE = "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 70 –ú–ë."
UNSUPPORTED_FORMAT_MESSAGE = (
    "–≠—Ç–æ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ mp3, wav, m4a –∏–ª–∏ ogg/opus."
)
ANALYSIS_ERROR_MESSAGE = (
    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
)


def format_key(note: str, mode: str, enharmonic: Optional[str]) -> str:
    """Format musical key string.

    >>> format_key("F#", "min", "Gb")
    'F#min (Gbmin)'
    >>> format_key("C", "Maj", None)
    'CMaj'
    """

    main = f"{note}{mode}"
    if enharmonic:
        return f"{main} ({enharmonic}{mode})"
    return main


def format_analysis_result(result: Mapping[str, object]) -> str:
    """Build the final message with the analysis results."""

    tone_line = format_key(
        str(result.get("note")),
        str(result.get("mode")),
        result.get("enharmonic") or None,
    )
    bpm = int(result.get("bpm", 0))
    bpm_double = int(result.get("bpm_double", bpm * 2))
    bpm_half = int(result.get("bpm_half", max(bpm // 2, 1)))
    duration = str(result.get("duration", "00:00"))
    filename = str(result.get("filename", "audio"))

    lines = [
        f"–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–∏—Ç–∞: {filename}",
        f"–¢–æ–Ω: {tone_line}",
        f"–¢–µ–º–ø: {bpm} BPM ({bpm_double} / {bpm_half})",
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}",
    ]

    close_key = result.get("close_key")
    if isinstance(close_key, Mapping):
        close_line = format_key(
            str(close_key.get("note")),
            str(close_key.get("mode")),
            close_key.get("enharmonic") or None,
        )
        lines.append(f"–ë–ª–∏–∑–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç: {close_line}")

    return "\n".join(lines)


__all__ = [
    "START_MESSAGE",
    "FILE_TOO_LARGE_MESSAGE",
    "UNSUPPORTED_FORMAT_MESSAGE",
    "ANALYSIS_ERROR_MESSAGE",
    "format_key",
    "format_analysis_result",
]
